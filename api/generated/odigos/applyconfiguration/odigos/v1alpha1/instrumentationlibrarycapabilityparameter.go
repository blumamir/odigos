/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// InstrumentationLibraryCapabilityParameterApplyConfiguration represents a declarative configuration of the InstrumentationLibraryCapabilityParameter type for use
// with apply.
type InstrumentationLibraryCapabilityParameterApplyConfiguration struct {
	ParameterName   *string  `json:"parameterName,omitempty"`
	BooleanValue    *bool    `json:"booleanValue,omitempty"`
	IntValue        *int     `json:"intValue,omitempty"`
	NumberValue     *float64 `json:"numberValue,omitempty"`
	StringValue     *string  `json:"stringValue,omitempty"`
	StringListValue []string `json:"stringListValue,omitempty"`
}

// InstrumentationLibraryCapabilityParameterApplyConfiguration constructs a declarative configuration of the InstrumentationLibraryCapabilityParameter type for use with
// apply.
func InstrumentationLibraryCapabilityParameter() *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	return &InstrumentationLibraryCapabilityParameterApplyConfiguration{}
}

// WithParameterName sets the ParameterName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParameterName field is set to the value of the last call.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithParameterName(value string) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	b.ParameterName = &value
	return b
}

// WithBooleanValue sets the BooleanValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BooleanValue field is set to the value of the last call.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithBooleanValue(value bool) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	b.BooleanValue = &value
	return b
}

// WithIntValue sets the IntValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IntValue field is set to the value of the last call.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithIntValue(value int) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	b.IntValue = &value
	return b
}

// WithNumberValue sets the NumberValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumberValue field is set to the value of the last call.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithNumberValue(value float64) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	b.NumberValue = &value
	return b
}

// WithStringValue sets the StringValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StringValue field is set to the value of the last call.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithStringValue(value string) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	b.StringValue = &value
	return b
}

// WithStringListValue adds the given value to the StringListValue field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StringListValue field.
func (b *InstrumentationLibraryCapabilityParameterApplyConfiguration) WithStringListValue(values ...string) *InstrumentationLibraryCapabilityParameterApplyConfiguration {
	for i := range values {
		b.StringListValue = append(b.StringListValue, values[i])
	}
	return b
}
