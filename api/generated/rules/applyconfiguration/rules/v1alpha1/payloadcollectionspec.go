/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workload "github.com/odigos-io/odigos/k8sutils/pkg/workload"
)

// PayloadCollectionSpecApplyConfiguration represents a declarative configuration of the PayloadCollectionSpec type for use
// with apply.
type PayloadCollectionSpecApplyConfiguration struct {
	RuleName                 *string                                         `json:"ruleName,omitempty"`
	Notes                    *string                                         `json:"notes,omitempty"`
	Disabled                 *bool                                           `json:"disabled,omitempty"`
	Workloads                *[]workload.PodWorkload                         `json:"workloads,omitempty"`
	InstrumentationLibraries *[]InstrumentationLibraryIdApplyConfiguration   `json:"instrumentationLibraries,omitempty"`
	HttpRequest              *HttpPayloadCollectionRuleApplyConfiguration    `json:"httpRequest,omitempty"`
	HttpResponse             *HttpPayloadCollectionRuleApplyConfiguration    `json:"httpResponse,omitempty"`
	DbQuery                  *DbQueryPayloadCollectionRuleApplyConfiguration `json:"dbQuery,omitempty"`
}

// PayloadCollectionSpecApplyConfiguration constructs a declarative configuration of the PayloadCollectionSpec type for use with
// apply.
func PayloadCollectionSpec() *PayloadCollectionSpecApplyConfiguration {
	return &PayloadCollectionSpecApplyConfiguration{}
}

// WithRuleName sets the RuleName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RuleName field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithRuleName(value string) *PayloadCollectionSpecApplyConfiguration {
	b.RuleName = &value
	return b
}

// WithNotes sets the Notes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Notes field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithNotes(value string) *PayloadCollectionSpecApplyConfiguration {
	b.Notes = &value
	return b
}

// WithDisabled sets the Disabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disabled field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithDisabled(value bool) *PayloadCollectionSpecApplyConfiguration {
	b.Disabled = &value
	return b
}

// WithWorkloads sets the Workloads field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workloads field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithWorkloads(value []workload.PodWorkload) *PayloadCollectionSpecApplyConfiguration {
	b.Workloads = &value
	return b
}

func (b *PayloadCollectionSpecApplyConfiguration) ensureInstrumentationLibraryIdApplyConfigurationExists() {
	if b.InstrumentationLibraries == nil {
		b.InstrumentationLibraries = &[]InstrumentationLibraryIdApplyConfiguration{}
	}
}

// WithInstrumentationLibraries adds the given value to the InstrumentationLibraries field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InstrumentationLibraries field.
func (b *PayloadCollectionSpecApplyConfiguration) WithInstrumentationLibraries(values ...*InstrumentationLibraryIdApplyConfiguration) *PayloadCollectionSpecApplyConfiguration {
	b.ensureInstrumentationLibraryIdApplyConfigurationExists()
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstrumentationLibraries")
		}
		*b.InstrumentationLibraries = append(*b.InstrumentationLibraries, *values[i])
	}
	return b
}

// WithHttpRequest sets the HttpRequest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HttpRequest field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithHttpRequest(value *HttpPayloadCollectionRuleApplyConfiguration) *PayloadCollectionSpecApplyConfiguration {
	b.HttpRequest = value
	return b
}

// WithHttpResponse sets the HttpResponse field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HttpResponse field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithHttpResponse(value *HttpPayloadCollectionRuleApplyConfiguration) *PayloadCollectionSpecApplyConfiguration {
	b.HttpResponse = value
	return b
}

// WithDbQuery sets the DbQuery field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DbQuery field is set to the value of the last call.
func (b *PayloadCollectionSpecApplyConfiguration) WithDbQuery(value *DbQueryPayloadCollectionRuleApplyConfiguration) *PayloadCollectionSpecApplyConfiguration {
	b.DbQuery = value
	return b
}
